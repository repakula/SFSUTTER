@isTest
global class TestWebserviceMock implements WebServiceMock {
   
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {

        // Create response element from the autogenerated class.
        // Populate response element.
        // Add response element to the response parameter : "GetPatientListByPVP" Method, as follows:
        
        AQRSProviderServices1.GetPatientListByPVPResponse_element respElement1 = new  AQRSProviderServices1.GetPatientListByPVPResponse_element();
        // Create the mocktest records
        AQRSPROVIDERATTRIBUTES1.PatientListForPVPData mockPatient1 = new AQRSPROVIDERATTRIBUTES1.PatientListForPVPData();
        mockPatient1.Department_ID = 'dept123';
        mockPatient1.Epic_Patient_ID= 'dept123';
        mockPatient1.Facility_ID= 'dept123';
        mockPatient1.Foundation= 'dept123';
        mockPatient1.Foundation_ID= 'dept123';
        mockPatient1.Measure_Name= 'dept123';
        mockPatient1.Next_Appointment_Time= 'dept123';
        mockPatient1.Next_appointment_department_name = 'dept123';
        mockPatient1.Next_appointment_provider= 'dept123';
        mockPatient1.Patient_Race= 'dept123';
        mockPatient1.Patient_home_address= 'dept123';
        mockPatient1.Payor_ID= 'dept123';
        mockPatient1.Payor_Name= 'dept123';
        mockPatient1.anchor_date= 'dept123';
        mockPatient1.awv_gaps= 'dept123';
        mockPatient1.date_of_last_appointment= 'dept123';
        mockPatient1.date_of_next_appointment= 'dept123';
        mockPatient1.department_Name= 'dept123';
        mockPatient1.division_ID= 'dept123';
        mockPatient1.division_name= 'dept123';
        mockPatient1.email_address= 'dept123';
        mockPatient1.facility_Name= 'dept123';
        
        AQRSPROVIDERATTRIBUTES1.PatientListForPVPData mockPatient12 = new AQRSPROVIDERATTRIBUTES1.PatientListForPVPData();
        mockPatient12.Department_ID = 'dept123';
        mockPatient12.Epic_Patient_ID= 'dept123';
        mockPatient12.Facility_ID= 'dept123';
        mockPatient12.Foundation= 'dept123';
        mockPatient12.Foundation_ID= 'dept123';
        mockPatient12.Measure_Name= 'dept123';
        mockPatient12.Next_Appointment_Time= 'dept123';
        mockPatient12.Next_appointment_department_name = 'dept123';
        mockPatient12.Next_appointment_provider= 'dept123';
        mockPatient12.Patient_Race= 'dept123';
        mockPatient12.Patient_home_address= 'dept123';
        mockPatient12.Payor_ID= 'dept123';
        mockPatient12.Payor_Name= 'dept123';
        mockPatient12.anchor_date= 'dept123';
        mockPatient12.awv_gaps= 'dept123';
        mockPatient12.date_of_last_appointment= 'dept123';
        mockPatient12.date_of_next_appointment= 'dept123';
        mockPatient12.department_Name= 'dept123';
        mockPatient12.division_ID= 'dept123';
        mockPatient12.division_name= 'dept123';
        mockPatient12.email_address= 'dept123';
        mockPatient12.facility_Name= 'dept123';

        AQRSPROVIDERATTRIBUTES1.PatientListForPVPData[] resList = new list<AQRSPROVIDERATTRIBUTES1.PatientListForPVPData>();
        resList.add(mockPatient12);
        resList.add(mockPatient1);
        
        AQRSPROVIDERATTRIBUTES1.ArrayOfPatientListForPVPData arrayPvpList1 = new AQRSPROVIDERATTRIBUTES1.ArrayOfPatientListForPVPData();
        arrayPvpList1.PatientListForPVPData = resList;
        respElement1.GetPatientListByPVPResult.PatientListForPVPDataArray = arrayPvpList1;
        response.put('response_x', respElement1); 
   }
}